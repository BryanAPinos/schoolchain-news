{"id":"../node_modules/libp2p/src/circuit/protocol/index.js","dependencies":[{"name":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\package.json","includedInParent":true,"mtime":1593887166831},{"name":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\libp2p\\package.json","includedInParent":true,"mtime":1593975640392},{"name":"protons","loc":{"line":2,"column":25},"parent":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\libp2p\\src\\circuit\\protocol\\index.js","resolved":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\protons\\src\\index.js"}],"generated":{"js":"'use strict';\n\nconst protobuf = require('protons');\n\nmodule.exports = protobuf(`\nmessage CircuitRelay {\n\n  enum Status {\n    SUCCESS                    = 100;\n    HOP_SRC_ADDR_TOO_LONG      = 220;\n    HOP_DST_ADDR_TOO_LONG      = 221;\n    HOP_SRC_MULTIADDR_INVALID  = 250;\n    HOP_DST_MULTIADDR_INVALID  = 251;\n    HOP_NO_CONN_TO_DST         = 260;\n    HOP_CANT_DIAL_DST          = 261;\n    HOP_CANT_OPEN_DST_STREAM   = 262;\n    HOP_CANT_SPEAK_RELAY       = 270;\n    HOP_CANT_RELAY_TO_SELF     = 280;\n    STOP_SRC_ADDR_TOO_LONG     = 320;\n    STOP_DST_ADDR_TOO_LONG     = 321;\n    STOP_SRC_MULTIADDR_INVALID = 350;\n    STOP_DST_MULTIADDR_INVALID = 351;\n    STOP_RELAY_REFUSED         = 390;\n    MALFORMED_MESSAGE          = 400;\n  }\n\n  enum Type { // RPC identifier, either HOP, STOP or STATUS\n    HOP = 1;\n    STOP = 2;\n    STATUS = 3;\n    CAN_HOP = 4;\n  }\n\n  message Peer {\n    required bytes id = 1;    // peer id\n    repeated bytes addrs = 2; // peer's known addresses\n  }\n\n  optional Type type = 1;     // Type of the message\n\n  optional Peer srcPeer = 2;  // srcPeer and dstPeer are used when Type is HOP or STATUS\n  optional Peer dstPeer = 3;\n\n  optional Status code = 4;   // Status code, used when Type is STATUS\n}\n`);"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":1,"column":0}},{"generated":{"line":3,"column":0},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":0}},{"name":"protobuf","generated":{"line":3,"column":6},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":6}},{"generated":{"line":3,"column":14},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":14}},{"name":"require","generated":{"line":3,"column":17},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":17}},{"generated":{"line":3,"column":24},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":24}},{"generated":{"line":3,"column":25},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":25}},{"generated":{"line":3,"column":34},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":24}},{"generated":{"line":3,"column":35},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":2,"column":0}},{"name":"module","generated":{"line":5,"column":0},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":0}},{"generated":{"line":5,"column":6},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":6}},{"name":"exports","generated":{"line":5,"column":7},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":7}},{"generated":{"line":5,"column":14},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":0}},{"name":"protobuf","generated":{"line":5,"column":17},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":17}},{"generated":{"line":5,"column":25},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":25}},{"generated":{"line":5,"column":26},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":27}},{"generated":{"line":46,"column":1},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":25}},{"generated":{"line":46,"column":2},"source":"../node_modules/libp2p/src/circuit/protocol/index.js","original":{"line":3,"column":0}}],"sources":{"../node_modules/libp2p/src/circuit/protocol/index.js":"'use strict'\nconst protobuf = require('protons')\nmodule.exports = protobuf(`\nmessage CircuitRelay {\n\n  enum Status {\n    SUCCESS                    = 100;\n    HOP_SRC_ADDR_TOO_LONG      = 220;\n    HOP_DST_ADDR_TOO_LONG      = 221;\n    HOP_SRC_MULTIADDR_INVALID  = 250;\n    HOP_DST_MULTIADDR_INVALID  = 251;\n    HOP_NO_CONN_TO_DST         = 260;\n    HOP_CANT_DIAL_DST          = 261;\n    HOP_CANT_OPEN_DST_STREAM   = 262;\n    HOP_CANT_SPEAK_RELAY       = 270;\n    HOP_CANT_RELAY_TO_SELF     = 280;\n    STOP_SRC_ADDR_TOO_LONG     = 320;\n    STOP_DST_ADDR_TOO_LONG     = 321;\n    STOP_SRC_MULTIADDR_INVALID = 350;\n    STOP_DST_MULTIADDR_INVALID = 351;\n    STOP_RELAY_REFUSED         = 390;\n    MALFORMED_MESSAGE          = 400;\n  }\n\n  enum Type { // RPC identifier, either HOP, STOP or STATUS\n    HOP = 1;\n    STOP = 2;\n    STATUS = 3;\n    CAN_HOP = 4;\n  }\n\n  message Peer {\n    required bytes id = 1;    // peer id\n    repeated bytes addrs = 2; // peer's known addresses\n  }\n\n  optional Type type = 1;     // Type of the message\n\n  optional Peer srcPeer = 2;  // srcPeer and dstPeer are used when Type is HOP or STATUS\n  optional Peer dstPeer = 3;\n\n  optional Status code = 4;   // Status code, used when Type is STATUS\n}\n`)\n"},"lineCount":null}},"error":null,"hash":"c6a81123046d0ad440d121ce2137792a","cacheData":{"env":{}}}