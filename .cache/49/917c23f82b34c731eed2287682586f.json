{"id":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","dependencies":[{"name":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\package.json","includedInParent":true,"mtime":1593887166831},{"name":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\libp2p-interfaces\\package.json","includedInParent":true,"mtime":1593975640831},{"name":"class-is","loc":{"line":3,"column":23},"parent":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\libp2p-interfaces\\src\\topology\\multicodec-topology.js","resolved":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\class-is\\index.js"},{"name":"./index","loc":{"line":5,"column":25},"parent":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\libp2p-interfaces\\src\\topology\\multicodec-topology.js","resolved":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\libp2p-interfaces\\src\\topology\\index.js"}],"generated":{"js":"'use strict'\n\nconst withIs = require('class-is')\n\nconst Topology = require('./index')\n\nclass MulticodecTopology extends Topology {\n  /**\n   * @param {Object} props\n   * @param {number} props.min minimum needed connections (default: 0)\n   * @param {number} props.max maximum needed connections (default: Infinity)\n   * @param {Array<string>} props.multicodecs protocol multicodecs\n   * @param {Object} props.handlers\n   * @param {function} props.handlers.onConnect protocol \"onConnect\" handler\n   * @param {function} props.handlers.onDisconnect protocol \"onDisconnect\" handler\n   * @constructor\n   */\n  constructor ({\n    min,\n    max,\n    multicodecs,\n    handlers\n  }) {\n    super({ min, max, handlers })\n\n    if (!multicodecs) {\n      throw new Error('one or more multicodec should be provided')\n    }\n\n    if (!handlers) {\n      throw new Error('the handlers should be provided')\n    }\n\n    if (typeof handlers.onConnect !== 'function') {\n      throw new Error('the \\'onConnect\\' handler must be provided')\n    }\n\n    if (typeof handlers.onDisconnect !== 'function') {\n      throw new Error('the \\'onDisconnect\\' handler must be provided')\n    }\n\n    this.multicodecs = Array.isArray(multicodecs) ? multicodecs : [multicodecs]\n    this._registrar = undefined\n\n    this._onProtocolChange = this._onProtocolChange.bind(this)\n    this._onPeerConnect = this._onPeerConnect.bind(this)\n  }\n\n  set registrar (registrar) {\n    this._registrar = registrar\n    this._registrar.peerStore.on('change:protocols', this._onProtocolChange)\n    this._registrar.connectionManager.on('peer:connect', this._onPeerConnect)\n\n    // Update topology peers\n    this._updatePeers(this._registrar.peerStore.peers.values())\n  }\n\n  /**\n   * Update topology.\n   * @param {Array<{id: PeerId, multiaddrs: Array<Multiaddr>, protocols: Array<string>}>} peerDataIterable\n   * @returns {void}\n   */\n  _updatePeers (peerDataIterable) {\n    for (const { id, protocols } of peerDataIterable) {\n      if (this.multicodecs.filter(multicodec => protocols.includes(multicodec)).length) {\n        // Add the peer regardless of whether or not there is currently a connection\n        this.peers.add(id.toB58String())\n        // If there is a connection, call _onConnect\n        const connection = this._registrar.getConnection(id)\n        connection && this._onConnect(id, connection)\n      } else {\n        // Remove any peers we might be tracking that are no longer of value to us\n        this.peers.delete(id.toB58String())\n      }\n    }\n  }\n\n  /**\n   * Check if a new peer support the multicodecs for this topology.\n   * @param {Object} props\n   * @param {PeerId} props.peerId\n   * @param {Array<string>} props.protocols\n   */\n  _onProtocolChange ({ peerId, protocols }) {\n    const hadPeer = this.peers.has(peerId.toB58String())\n    const hasProtocol = protocols.filter(protocol => this.multicodecs.includes(protocol))\n\n    // Not supporting the protocol anymore?\n    if (hadPeer && hasProtocol.length === 0) {\n      this._onDisconnect(peerId)\n    }\n\n    // New to protocol support\n    for (const protocol of protocols) {\n      if (this.multicodecs.includes(protocol)) {\n        const peerData = this._registrar.peerStore.get(peerId)\n        this._updatePeers([peerData])\n        return\n      }\n    }\n  }\n\n  /**\n   * Verify if a new connected peer has a topology multicodec and call _onConnect.\n   * @param {Connection} connection\n   * @returns {void}\n   */\n  _onPeerConnect (connection) {\n    const peerId = connection.remotePeer\n    const protocols = this._registrar.peerStore.protoBook.get(peerId)\n\n    if (!protocols) {\n      return\n    }\n\n    if (this.multicodecs.find(multicodec => protocols.includes(multicodec))) {\n      this.peers.add(peerId.toB58String())\n      this._onConnect(peerId, connection)\n    }\n  }\n}\n\nmodule.exports = withIs(MulticodecTopology, { className: 'MulticodecTopology', symbolName: '@libp2p/js-interfaces/topology/multicodec-topology' })\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}}],"sources":{"../node_modules/libp2p-interfaces/src/topology/multicodec-topology.js":"'use strict'\n\nconst withIs = require('class-is')\n\nconst Topology = require('./index')\n\nclass MulticodecTopology extends Topology {\n  /**\n   * @param {Object} props\n   * @param {number} props.min minimum needed connections (default: 0)\n   * @param {number} props.max maximum needed connections (default: Infinity)\n   * @param {Array<string>} props.multicodecs protocol multicodecs\n   * @param {Object} props.handlers\n   * @param {function} props.handlers.onConnect protocol \"onConnect\" handler\n   * @param {function} props.handlers.onDisconnect protocol \"onDisconnect\" handler\n   * @constructor\n   */\n  constructor ({\n    min,\n    max,\n    multicodecs,\n    handlers\n  }) {\n    super({ min, max, handlers })\n\n    if (!multicodecs) {\n      throw new Error('one or more multicodec should be provided')\n    }\n\n    if (!handlers) {\n      throw new Error('the handlers should be provided')\n    }\n\n    if (typeof handlers.onConnect !== 'function') {\n      throw new Error('the \\'onConnect\\' handler must be provided')\n    }\n\n    if (typeof handlers.onDisconnect !== 'function') {\n      throw new Error('the \\'onDisconnect\\' handler must be provided')\n    }\n\n    this.multicodecs = Array.isArray(multicodecs) ? multicodecs : [multicodecs]\n    this._registrar = undefined\n\n    this._onProtocolChange = this._onProtocolChange.bind(this)\n    this._onPeerConnect = this._onPeerConnect.bind(this)\n  }\n\n  set registrar (registrar) {\n    this._registrar = registrar\n    this._registrar.peerStore.on('change:protocols', this._onProtocolChange)\n    this._registrar.connectionManager.on('peer:connect', this._onPeerConnect)\n\n    // Update topology peers\n    this._updatePeers(this._registrar.peerStore.peers.values())\n  }\n\n  /**\n   * Update topology.\n   * @param {Array<{id: PeerId, multiaddrs: Array<Multiaddr>, protocols: Array<string>}>} peerDataIterable\n   * @returns {void}\n   */\n  _updatePeers (peerDataIterable) {\n    for (const { id, protocols } of peerDataIterable) {\n      if (this.multicodecs.filter(multicodec => protocols.includes(multicodec)).length) {\n        // Add the peer regardless of whether or not there is currently a connection\n        this.peers.add(id.toB58String())\n        // If there is a connection, call _onConnect\n        const connection = this._registrar.getConnection(id)\n        connection && this._onConnect(id, connection)\n      } else {\n        // Remove any peers we might be tracking that are no longer of value to us\n        this.peers.delete(id.toB58String())\n      }\n    }\n  }\n\n  /**\n   * Check if a new peer support the multicodecs for this topology.\n   * @param {Object} props\n   * @param {PeerId} props.peerId\n   * @param {Array<string>} props.protocols\n   */\n  _onProtocolChange ({ peerId, protocols }) {\n    const hadPeer = this.peers.has(peerId.toB58String())\n    const hasProtocol = protocols.filter(protocol => this.multicodecs.includes(protocol))\n\n    // Not supporting the protocol anymore?\n    if (hadPeer && hasProtocol.length === 0) {\n      this._onDisconnect(peerId)\n    }\n\n    // New to protocol support\n    for (const protocol of protocols) {\n      if (this.multicodecs.includes(protocol)) {\n        const peerData = this._registrar.peerStore.get(peerId)\n        this._updatePeers([peerData])\n        return\n      }\n    }\n  }\n\n  /**\n   * Verify if a new connected peer has a topology multicodec and call _onConnect.\n   * @param {Connection} connection\n   * @returns {void}\n   */\n  _onPeerConnect (connection) {\n    const peerId = connection.remotePeer\n    const protocols = this._registrar.peerStore.protoBook.get(peerId)\n\n    if (!protocols) {\n      return\n    }\n\n    if (this.multicodecs.find(multicodec => protocols.includes(multicodec))) {\n      this.peers.add(peerId.toB58String())\n      this._onConnect(peerId, connection)\n    }\n  }\n}\n\nmodule.exports = withIs(MulticodecTopology, { className: 'MulticodecTopology', symbolName: '@libp2p/js-interfaces/topology/multicodec-topology' })\n"},"lineCount":124}},"error":null,"hash":"ab018b39880301cf822cfc1d3707a1b2","cacheData":{"env":{}}}