{"id":"index.html","dependencies":[{"name":"./favicon.ico","dynamic":true,"resolved":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\src\\favicon.ico","parent":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\src\\index.html"},{"name":"./index.js","dynamic":true,"resolved":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\src\\index.js","parent":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\src\\index.html"}],"generated":{"html":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <link rel=\"icon\" href=\"/8af3a74ede48e250ceb935c026242483.ico\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta name=\"theme-color\" content=\"#000000\">\n    <link rel=\"apple-touch-icon\" href=\"/8af3a74ede48e250ceb935c026242483.ico\">\n    <title>SchoolChain News</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n    <script src=\"/168726dbe96b3ce427e7fedce31bb0bc.js\"></script>\n    <!-- loading the minified version using jsDelivr -->\n    <!-- <script src=\"https://cdn.jsdelivr.net/npm/ipfs/dist/index.min.js\"></script> -->\n\n    <!-- loading the human-readable (not minified) version jsDelivr -->\n    <script src=\"https://cdn.jsdelivr.net/npm/ipfs/dist/index.min.js\"></script>\n    <!-- <script src=\"components/ipfs.js\"></script> -->\n\n    <!-- <script>\n      async function main() {\n        const node = await window.Ipfs.create();\n        // Ready to use!\n        // See https://github.com/ipfs/js-ipfs#core-api\n\n        // const node = await IPFS.create();\n\n        const data = \"NJIT, Rutgers\";\n\n        // add your data to to IPFS - this can be a string, a Buffer,\n        // a stream of Buffers, etc\n        const results = node.add(data);\n\n        // we loop over the results because 'add' supports multiple\n        // additions, but we only added one entry here so we only see\n        // one log line in the output\n        for await (const { cid } of results) {\n          // CID (Content IDentifier) uniquely addresses the data\n          // and can be used to get it again.\n          console.log(cid.toString());\n          var school = cid.toString();\n        }\n\n        const stream = node.cat(\n          \"QmTUaCJzcTg864Hi19E3X8ndgbzdx5mMDi85PyfqeN8AGK\"\n        );\n        var name = \"\";\n\n        for await (const chunk of stream) {\n          // chunks of data are returned as a Buffer, convert it back to a string\n          name += chunk.toString();\n        }\n\n        console.log(name);\n      }\n\n      // main();\n    </script> -->\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"de75d5f96719ac93ef85417654e5c170","cacheData":{}}