{"id":"../node_modules/libp2p-pubsub/src/message/sign.js","dependencies":[{"name":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\package.json","includedInParent":true,"mtime":1593887166831},{"name":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\libp2p-pubsub\\package.json","includedInParent":true,"mtime":1593975643504},{"name":"buffer","loc":{"line":2,"column":27},"parent":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\libp2p-pubsub\\src\\message\\sign.js","resolved":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\node-libs-browser\\node_modules\\buffer\\index.js"},{"name":"peer-id","loc":{"line":3,"column":23},"parent":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\libp2p-pubsub\\src\\message\\sign.js","resolved":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\peer-id\\src\\index.js"},{"name":"./index","loc":{"line":4,"column":28},"parent":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\libp2p-pubsub\\src\\message\\sign.js","resolved":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\libp2p-pubsub\\src\\message\\index.js"}],"generated":{"js":"\n'use strict'\nconst { Buffer } = require('buffer')\nconst PeerId = require('peer-id')\nconst { Message } = require('./index')\nconst SignPrefix = Buffer.from('libp2p-pubsub:')\n\n/**\n * Signs the provided message with the given `peerId`\n *\n * @param {PeerId} peerId\n * @param {Message} message\n * @returns {Promise<Message>}\n */\nasync function signMessage (peerId, message) {\n  // Get the message in bytes, and prepend with the pubsub prefix\n  const bytes = Buffer.concat([\n    SignPrefix,\n    Message.encode(message)\n  ])\n\n  const signature = await peerId.privKey.sign(bytes)\n\n  return {\n    ...message,\n    signature: signature,\n    key: peerId.pubKey.bytes\n  }\n}\n\n/**\n * Verifies the signature of the given message\n * @param {rpc.RPC.Message} message\n * @returns {Promise<Boolean>}\n */\nasync function verifySignature (message) {\n  // Get message sans the signature\n  const baseMessage = { ...message }\n  delete baseMessage.signature\n  delete baseMessage.key\n  const bytes = Buffer.concat([\n    SignPrefix,\n    Message.encode(baseMessage)\n  ])\n\n  // Get the public key\n  const pubKey = await messagePublicKey(message)\n\n  // verify the base message\n  return pubKey.verify(bytes, message.signature)\n}\n\n/**\n * Returns the PublicKey associated with the given message.\n * If no, valid PublicKey can be retrieved an error will be returned.\n *\n * @param {Message} message\n * @returns {Promise<PublicKey>}\n */\nasync function messagePublicKey (message) {\n  if (message.key) {\n    const peerId = await PeerId.createFromPubKey(message.key)\n\n    // the key belongs to the sender, return the key\n    if (peerId.isEqual(message.from)) return peerId.pubKey\n    // We couldn't validate pubkey is from the originator, error\n    throw new Error('Public Key does not match the originator')\n  } else {\n    // should be available in the from property of the message (peer id)\n    const from = PeerId.createFromBytes(message.from)\n\n    if (from.pubKey) {\n      return from.pubKey\n    } else {\n      throw new Error('Could not get the public key from the originator id')\n    }\n  }\n}\n\nmodule.exports = {\n  messagePublicKey,\n  signMessage,\n  SignPrefix,\n  verifySignature\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/libp2p-pubsub/src/message/sign.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}}],"sources":{"../node_modules/libp2p-pubsub/src/message/sign.js":"'use strict'\nconst { Buffer } = require('buffer')\nconst PeerId = require('peer-id')\nconst { Message } = require('./index')\nconst SignPrefix = Buffer.from('libp2p-pubsub:')\n\n/**\n * Signs the provided message with the given `peerId`\n *\n * @param {PeerId} peerId\n * @param {Message} message\n * @returns {Promise<Message>}\n */\nasync function signMessage (peerId, message) {\n  // Get the message in bytes, and prepend with the pubsub prefix\n  const bytes = Buffer.concat([\n    SignPrefix,\n    Message.encode(message)\n  ])\n\n  const signature = await peerId.privKey.sign(bytes)\n\n  return {\n    ...message,\n    signature: signature,\n    key: peerId.pubKey.bytes\n  }\n}\n\n/**\n * Verifies the signature of the given message\n * @param {rpc.RPC.Message} message\n * @returns {Promise<Boolean>}\n */\nasync function verifySignature (message) {\n  // Get message sans the signature\n  const baseMessage = { ...message }\n  delete baseMessage.signature\n  delete baseMessage.key\n  const bytes = Buffer.concat([\n    SignPrefix,\n    Message.encode(baseMessage)\n  ])\n\n  // Get the public key\n  const pubKey = await messagePublicKey(message)\n\n  // verify the base message\n  return pubKey.verify(bytes, message.signature)\n}\n\n/**\n * Returns the PublicKey associated with the given message.\n * If no, valid PublicKey can be retrieved an error will be returned.\n *\n * @param {Message} message\n * @returns {Promise<PublicKey>}\n */\nasync function messagePublicKey (message) {\n  if (message.key) {\n    const peerId = await PeerId.createFromPubKey(message.key)\n\n    // the key belongs to the sender, return the key\n    if (peerId.isEqual(message.from)) return peerId.pubKey\n    // We couldn't validate pubkey is from the originator, error\n    throw new Error('Public Key does not match the originator')\n  } else {\n    // should be available in the from property of the message (peer id)\n    const from = PeerId.createFromBytes(message.from)\n\n    if (from.pubKey) {\n      return from.pubKey\n    } else {\n      throw new Error('Could not get the public key from the originator id')\n    }\n  }\n}\n\nmodule.exports = {\n  messagePublicKey,\n  signMessage,\n  SignPrefix,\n  verifySignature\n}\n"},"lineCount":86}},"error":null,"hash":"73e09beabfa3b9f51adeef7c9ccd5624","cacheData":{"env":{}}}