{"id":"../node_modules/libp2p-record/src/selectors/public-key.js","dependencies":[{"name":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\package.json","includedInParent":true,"mtime":1593887166831},{"name":"C:\\Users\\Bryan Pinos\\Desktop\\Test Code\\Privacy Hackathon\\near-test\\node_modules\\libp2p-record\\package.json","includedInParent":true,"mtime":1593975638436}],"generated":{"js":"'use strict';\n/**\n * Best record selector, for public key records.\n * Simply returns the first record, as all valid public key\n * records are equal.\n *\n * @param {Buffer} k\n * @param {Array<Buffer>} records\n * @returns {number}\n */\n\nconst publicKeySelector = (k, records) => {\n  return 0;\n};\n\nmodule.exports = publicKeySelector;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":1,"column":0}},{"generated":{"line":2,"column":0},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":3,"column":0}},{"generated":{"line":12,"column":0},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":12,"column":0}},{"name":"publicKeySelector","generated":{"line":12,"column":6},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":12,"column":6}},{"generated":{"line":12,"column":23},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":12,"column":23}},{"generated":{"line":12,"column":26},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":12,"column":26}},{"name":"k","generated":{"line":12,"column":27},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":12,"column":27}},{"generated":{"line":12,"column":28},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":12,"column":26}},{"name":"records","generated":{"line":12,"column":30},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":12,"column":30}},{"generated":{"line":12,"column":37},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":12,"column":26}},{"generated":{"line":12,"column":42},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":12,"column":42}},{"generated":{"line":13,"column":0},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":13,"column":2}},{"generated":{"line":13,"column":9},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":13,"column":9}},{"generated":{"line":13,"column":10},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":13,"column":2}},{"generated":{"line":14,"column":0},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":14,"column":1}},{"generated":{"line":14,"column":1},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":12,"column":0}},{"name":"module","generated":{"line":16,"column":0},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":16,"column":0}},{"generated":{"line":16,"column":6},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":16,"column":6}},{"name":"exports","generated":{"line":16,"column":7},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":16,"column":7}},{"generated":{"line":16,"column":14},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":16,"column":0}},{"name":"publicKeySelector","generated":{"line":16,"column":17},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":16,"column":17}},{"generated":{"line":16,"column":34},"source":"../node_modules/libp2p-record/src/selectors/public-key.js","original":{"line":16,"column":0}}],"sources":{"../node_modules/libp2p-record/src/selectors/public-key.js":"'use strict'\n\n/**\n * Best record selector, for public key records.\n * Simply returns the first record, as all valid public key\n * records are equal.\n *\n * @param {Buffer} k\n * @param {Array<Buffer>} records\n * @returns {number}\n */\nconst publicKeySelector = (k, records) => {\n  return 0\n}\n\nmodule.exports = publicKeySelector\n"},"lineCount":null}},"error":null,"hash":"3fd8884fd583035c0f8b728f28dbf23c","cacheData":{"env":{}}}